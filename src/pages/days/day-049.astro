---
// coupled to the width attr on pixel
const gridSize = 20;
---

<div class="container">
  {
    Array.apply(null, Array(gridSize * gridSize)).map((_, i) => (
      <div class:list={["pixel", `pixel-${i}`]} />
    ))
  }
  <div id="follower"></div>
</div>

<style lang="scss" define:vars={{ gridSize }}>
  // TODO: remove duplication of gridSize
  $gridSize: 20;
  $containerSize: 400;
  $pixelSize: calc($containerSize / $gridSize);
  $followerSize: 20;

  :root {
    --containerSize: #{$containerSize}px;
    --pixelSize: #{$pixelSize}px;
    --followSize: #{$followerSize}px;
  }

  .container {
    position: relative;
    height: var(--containerSize);
    width: var(--containerSize);
    line-height: 0px;
    background-color: #2c3d4f;
  }

  .pixel {
    width: calc(100% / var(--gridSize));
    height: calc(100% / var(--gridSize));
    display: inline-block;
  }

  @for $col from 0 to $gridSize {
    @for $row from 0 to $gridSize {
      $i: $col * $gridSize + $row;
      .pixel-#{$i}:hover ~ #follower {
        transform: translate(#{$row * $pixelSize}px, #{$col * $pixelSize}px);
      }
    }
  }

  #follower {
    position: absolute;
    height: 20px;
    width: 20px;

    top: calc((var(--pixelSize) - var(--followSize)) / 2);
    left: calc((var(--pixelSize) - var(--followSize)) / 2);

    border-radius: 100%;
    background: #2ecc71;
    pointer-events: none;

    transition: all 0.5s ease-out;
    transform: translate(
      calc((var(--containerSize) - var(--pixelSize)) / 2),
      calc((var(--containerSize) - var(--pixelSize)) / 2)
    );

    &:before {
      content: "";
      box-sizing: border-box;
      position: absolute;
      width: 20px;
      height: 20px;

      top: 0px;

      border: 2px solid #2ecc71;
      border-radius: 100%;

      animation: pulsate 1.5s infinite forwards;
    }
  }

  @keyframes pulsate {
    0% {
      transform: scale(1);
      opacity: 1;
    }
    100% {
      transform: scale(3);
      opacity: 0;
    }
  }
</style>
